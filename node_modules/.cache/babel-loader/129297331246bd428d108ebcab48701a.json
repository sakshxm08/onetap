{"ast":null,"code":"var _jsxFileName = \"/Users/sakshamgambhir/Downloads/olx-main/src/Components/Pagination/Pagination.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport \"./pagination.css\";\nimport { AllPostContext } from \"../../contextStore/AllPostContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Pagination({\n  setCurrentPage\n}) {\n  _s();\n\n  const {\n    allPost\n  } = useContext(AllPostContext);\n  let [activeItem, setActiveItem] = useState(\"\");\n  let numberOfPages = [];\n  let itemsPerPage = 8;\n\n  for (let i = 1; i <= Math.ceil(allPost.length / itemsPerPage); i++) {\n    numberOfPages.push(i);\n  }\n\n  const showNextPage = e => {\n    let clickedPage = e.target.id;\n    setCurrentPage(clickedPage);\n    setActiveItem(Number(clickedPage)); //Number() is used to convert string to number because here id is string and , === equals checks both side same so we want to convert it to number so we can conditionly check and active class implementation\n  };\n\n  let pagination = numberOfPages.map(pageNumber => {\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      id: pageNumber,\n      className: activeItem === pageNumber ? \"active\" : \"\",\n      onClick: showNextPage,\n      children: pageNumber\n    }, pageNumber, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pagination\",\n    children: pagination\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 10\n  }, this);\n}\n\n_s(Pagination, \"6IylhMNV4Bs//whk78aVEJd7qN8=\");\n\n_c = Pagination;\nexport default Pagination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"sources":["/Users/sakshamgambhir/Downloads/olx-main/src/Components/Pagination/Pagination.js"],"names":["React","useContext","useState","AllPostContext","Pagination","setCurrentPage","allPost","activeItem","setActiveItem","numberOfPages","itemsPerPage","i","Math","ceil","length","push","showNextPage","e","clickedPage","target","id","Number","pagination","map","pageNumber"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,OAAO,kBAAP;AACA,SAASC,cAAT,QAA+B,mCAA/B;;;AACA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAAwC;AAAA;;AACtC,QAAM;AAAEC,IAAAA;AAAF,MAAcL,UAAU,CAACE,cAAD,CAA9B;AACA,MAAI,CAACI,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,EAAD,CAA1C;AACA,MAAIO,aAAa,GAAG,EAApB;AACA,MAAIC,YAAY,GAAG,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIC,IAAI,CAACC,IAAL,CAAUP,OAAO,CAACQ,MAAR,GAAiBJ,YAA3B,CAArB,EAA+DC,CAAC,EAAhE,EAAoE;AAClEF,IAAAA,aAAa,CAACM,IAAd,CAAmBJ,CAAnB;AACD;;AACD,QAAMK,YAAY,GAAIC,CAAD,IAAO;AAC1B,QAAIC,WAAW,GAAGD,CAAC,CAACE,MAAF,CAASC,EAA3B;AACAf,IAAAA,cAAc,CAACa,WAAD,CAAd;AACAV,IAAAA,aAAa,CAACa,MAAM,CAACH,WAAD,CAAP,CAAb,CAH0B,CAGS;AACpC,GAJD;;AAKA,MAAII,UAAU,GAAGb,aAAa,CAACc,GAAd,CAAmBC,UAAD,IAAgB;AACjD,wBACE;AAEE,MAAA,EAAE,EAAEA,UAFN;AAGE,MAAA,SAAS,EAAEjB,UAAU,KAAKiB,UAAf,GAA4B,QAA5B,GAAuC,EAHpD;AAIE,MAAA,OAAO,EAAER,YAJX;AAAA,gBAMGQ;AANH,OACOA,UADP;AAAA;AAAA;AAAA;AAAA,YADF;AAUD,GAXgB,CAAjB;AAYA,sBAAO;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA,cAA6BF;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA1BQlB,U;;KAAAA,U;AA4BT,eAAeA,UAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport \"./pagination.css\";\nimport { AllPostContext } from \"../../contextStore/AllPostContext\";\nfunction Pagination({ setCurrentPage }) {\n  const { allPost } = useContext(AllPostContext);\n  let [activeItem, setActiveItem] = useState(\"\");\n  let numberOfPages = [];\n  let itemsPerPage = 8;\n  for (let i = 1; i <= Math.ceil(allPost.length / itemsPerPage); i++) {\n    numberOfPages.push(i);\n  }\n  const showNextPage = (e) => {\n    let clickedPage = e.target.id;\n    setCurrentPage(clickedPage);\n    setActiveItem(Number(clickedPage));//Number() is used to convert string to number because here id is string and , === equals checks both side same so we want to convert it to number so we can conditionly check and active class implementation\n  };\n  let pagination = numberOfPages.map((pageNumber) => {\n    return (\n      <li\n        key={pageNumber}\n        id={pageNumber}\n        className={activeItem === pageNumber ? \"active\" : \"\"}\n        onClick={showNextPage}\n      >\n        {pageNumber}\n      </li>\n    );\n  });\n  return <div className=\"pagination\">{pagination}</div>;\n}\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}